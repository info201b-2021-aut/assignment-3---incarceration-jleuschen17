national <- mutate(national, new_cases = cases - lag(national$cases, 1))
national$new_cases[1] <- 1
# Similarly, the `deaths` columns *is not* the number of new deaths per day.
# Add (mutate) a new column on your `national` data frame called `new_deaths`
# that has the nubmer of *new* deaths each day
national <- mutate(national, new_deaths = deaths - lag(national$deaths, 1))
national$new_deaths[1] <- 0
# What was the date when the most new cases occured?
# `date_most_cases`
date_most_cases <- arrange(national, -new_cases)$date[1]
# What was the date when the most new deaths occured?
# `date_most_deaths`
date_most_deaths <- arrange(national, -new_deaths)$date[1]
# How many people died on the date when the most deaths occured? `most_deaths`
most_deaths <- select(national, date == date_most_deaths)$deaths
# How many people died on the date when the most deaths occured? `most_deaths`
most_deaths <- select(national, date == date_most_deaths)
# How many people died on the date when the most deaths occured? `most_deaths`
most_deaths <- arrange(national, -new_deaths)$new_deaths[1]
# What is the county with the *current* (e.g., on the most recent date)
# highest number of cases in each state? Your answer, stored in
# `highest_in_each_state`, should be a *vector* of
# `location` names (the column with COUNTY, STATE).
# Hint: be careful about the order of filtering your data!
counties_by_state <- group_by(counties, state)
View(counties_by_state)
# What is the county with the *current* (e.g., on the most recent date)
# highest number of cases in each state? Your answer, stored in
# `highest_in_each_state`, should be a *vector* of
# `location` names (the column with COUNTY, STATE).
# Hint: be careful about the order of filtering your data!
counties_by_state <- group_by(counties, state)
View(counties_by_state)
# What is the county with the *current* (e.g., on the most recent date)
# highest number of cases in each state? Your answer, stored in
# `highest_in_each_state`, should be a *vector* of
# `location` names (the column with COUNTY, STATE).
# Hint: be careful about the order of filtering your data!
counties_by_state <- counties %>% group_by(state)
# What is the county with the *current* (e.g., on the most recent date)
# highest number of cases in each state? Your answer, stored in
# `highest_in_each_state`, should be a *vector* of
# `location` names (the column with COUNTY, STATE).
# Hint: be careful about the order of filtering your data!
counties_by_state <- counties
# Which state has the highest ratio of deaths to cases (deaths/cases), as of the
# most recent date? `state_highest_ratio`
# (hint: you may need to create a new column in order to do this!)
most_recent_date <- arrange(states, date)
View(most_recent_date)
# Which state has the highest ratio of deaths to cases (deaths/cases), as of the
# most recent date? `state_highest_ratio`
# (hint: you may need to create a new column in order to do this!)
most_recent_date <- arrange(states, -date)[1]
# Which state has the highest ratio of deaths to cases (deaths/cases), as of the
# most recent date? `state_highest_ratio`
# (hint: you may need to create a new column in order to do this!)
most_recent_date <- arrange(states, -date)$date[1]
# Which state has the highest ratio of deaths to cases (deaths/cases), as of the
# most recent date? `state_highest_ratio`
# (hint: you may need to create a new column in order to do this!)
most_recent_date <- arrange(states, date)$date[1]
# Which state has the highest ratio of deaths to cases (deaths/cases), as of the
# most recent date? `state_highest_ratio`
# (hint: you may need to create a new column in order to do this!)
most_recent_date <- arrange(states, date)$date[nrow[states]]
# Which state has the highest ratio of deaths to cases (deaths/cases), as of the
# most recent date? `state_highest_ratio`
# (hint: you may need to create a new column in order to do this!)
most_recent_date <- arrange(states, date)$date[nrow(states)]
states_death_ratio_df <- filter(states, date == most_recent_date)
# What is the county with the *current* (e.g., on the most recent date)
# highest number of cases in each state? Your answer, stored in
# `highest_in_each_state`, should be a *vector* of
# `location` names (the column with COUNTY, STATE).
# Hint: be careful about the order of filtering your data!
most_recent_date <- arrange(counties, date)$date[nrow(counties)]
counties_by_state <- counties %>%
filter(date == most_recent_date)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarise(max = max(cases))
View(counties_by_state)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarise(max = max(cases), location)
most_recent_date <- arrange(counties, date)$date[nrow(counties)]
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarise(max = max(cases), location)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarise(max = max(cases), filter(county == max$county))
most_recent_date <- arrange(counties, date)$date[nrow(counties)]
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarise(max = max(cases))
most_recent_date_locations <- left_join(counties_by_state, counties, by=c(max, cases))
most_recent_date_locations <- left_join(counties_by_state, counties, by=c('max', 'cases'))
View(counties)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarise(max = max(cases), n = n())
View(counties_by_state)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarise(max = max(cases))
View(counties_by_state)
most_recent_date <- arrange(counties, date)$date[nrow(counties)]
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state, location) %>%
summarise(max = max(cases))
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
arrange(-cases)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarize(max = max(cases))
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarize(cases = max(cases))
counties_by_state_joined <- left_join(counties_by_state, counties, by=cases)
counties_by_state_joined <- left_join(counties_by_state, counties, by='cases')
View(counties_by_state_joined)
View(counties_by_state)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarize(cases = max(cases))
joined_data <- inner_join(counties_by_state, counties)
View(joined_data)
joined_data_counties <- filter(joined_data_counties != 'American Samoa')
joined_data_counties <- inner_join(counties_by_state, counties)
joined_data_counties <- filter(joined_data_counties != 'American Samoa')
joined_data_counties <- filter(joined_data_counties, state != 'American Samoa')
View(joined_data_counties)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarize(cases = max(cases))
joined_data_counties <- left_join(counties_by_state, counties)
View(joined_data_counties)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarize(cases = max(cases))
View(counties_by_state)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarize(cases = max(cases))
View(counties_by_state)
counties_by_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
summarize(cases = max(cases))
source("C:/Users/jleus/info201/assignment-2-us-covid-trends-jleuschen17/analysis.R")
source("C:/Users/jleus/info201/assignment-2-us-covid-trends-jleuschen17/analysis.R")
View(national)
View(states)
# Load the *county level* data into a variable. `counties`
# (this is a large dataset, which may take ~30 seconds to load)
counties <- read.csv('https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv')
View(counties)
View(counties)
View(national)
View(national)
# How many total cases have there been in the U.S. by the most recent date
# in the dataset? `total_us_cases`
total_us_cases <- national$cases[nrow(national)]
state_highest_cases_df <- states %>%
arrange(-cases)
state_highest_cases <- state_highest_cases_df$state[1]
state_highest_cases_df <- states %>%
arrange(-cases)
# For this section, you should explore the dataset by answering the following
# questions. HINT: Remeber that in class, we talked about how you can answer
# most data analytics questions by selecting specific columns and rows.
# For this assignemnt, you are welcome to use either base R dataframe indexing or
# use functions from the DPLYR package (e.g., using `pull()`). Regardless, you
# must return the specific column being asked about. For example, if you are
# asked the *county* with the highest number of deaths, your answer should
# be a single value (the name of the county: *not* an entire row of data).
# (again, make sure to read the documentation to understand the meaning of
# each row -- it isn't immediately apparent!)
library(dplyr)
state_highest_cases_df <- states %>%
arrange(-cases)
-
state_highest_cases <- state_highest_cases_df$state[1]
state_highest_cases_df <- states %>%
arrange(-cases)
state_highest_cases <- state_highest_cases_df$state[1]
# What is the highest number of cases in a state?
# `num_highest_state`
num_highest_state <- state_highest_cases_df$cases[1]
# Which state has the highest ratio of deaths to cases (deaths/cases), as of the
# most recent date? `state_highest_ratio`
# (hint: you may need to create a new column in order to do this!)
most_recent_date <- arrange(states, date)$date[nrow(states)]
states_death_ratio_df <- filter(states, date == most_recent_date)
states_death_ratio_df <- mutate(states_death_ratio_df, death_ratio = deaths/cases)
states_death_ratio_df <- arrange(states_death_ratio_df, -death_ratio)
state_highest_ratio <- states_death_ratio_df$state[1]
states_lowest_cases_df <- arrange(states_death_ratio_df, cases)
states_lowest_cases_df <- filter(states_lowest_cases_df, state != 'American Samoa'
& state != 'Northern Mariana Islands'
& state != 'Virgin Islands'
& state != 'Guam'
& state != 'District of Columbia'
& state != 'Puerto Rico')
state_lowest_cases <- states_lowest_cases_df$state[1]
county_highest_cases_df <- arrange(counties, -cases)
county_highest_cases <- county_highest_cases_df$county[1]
# What is the highest number of cases that have happened in a single county?
# `num_highest_cases_county`
num_highest_cases_county <- county_highest_cases_df$cases[1]
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
counties <- mutate(counties, location = paste(county,', ',state, sep=''))
# What is the name of the location (county, state) with the highest number
# of deaths? `location_most_deaths`
locations_most_deaths <- arrange(counties, -deaths)$location[1]
national <- mutate(national, new_cases = cases - lag(national$cases, 1))
national$new_cases[1] <- 1
national <- mutate(national, new_deaths = deaths - lag(national$deaths, 1))
national$new_deaths[1] <- 0
# What was the date when the most new cases occured?
# `date_most_cases`
date_most_cases <- arrange(national, -new_cases)$date[1]
View(national)
national <- mutate(national, new_deaths = deaths - lag(national$deaths, 1))
national$new_deaths[1] <- 0
# What was the date when the most new cases occured?
# `date_most_cases`
date_most_cases <- arrange(national, -new_cases)$date[1]
# How many people died on the date when the most deaths occured? `most_deaths`
most_deaths <- arrange(national, -new_deaths)$new_deaths[1]
most_recent_date <- arrange(counties, date)$date[nrow(counties)]
highest_in_each_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
mutate(maxCases = max(cases)) %>%
ungroup() %>%
filter(maxCases == cases) %>%
select(location)
View(highest_in_each_state)
lowest_in_each_state <- counties %>%
filter(date == most_recent_date) %>%
group_by(state) %>%
mutate(minDeaths = min(deaths)) %>%
ungroup() %>%
filter(minDeaths == deaths) %>%
select(location)
View(lowest_in_each_state)
state_by_day <- group_by(states, date)
state_by_day <- summarise(state_by_day, state_total = sum(cases))
View(state_by_day)
county_by_day <- group_by(counties, date)
county_by_day <- summarise(county_by_day, county_total = sum(cases))
View(county_by_day)
# Ask your own 3 questions: in the section below, pose 3 questions,
# then use the appropriate code to answer them.
#What state had the most covid cases in 2020?
most_in_2020 <- filter(national, date = '2020-12-31')$cases[1]
# Ask your own 3 questions: in the section below, pose 3 questions,
# then use the appropriate code to answer them.
#What state had the most covid cases in 2020?
most_in_2020 <- filter(national, date = '2020-12-31')
# Ask your own 3 questions: in the section below, pose 3 questions,
# then use the appropriate code to answer them.
#What state had the most covid cases in 2020?
most_in_2020 <- filter(national, date == '2020-12-31')
View(most_in_2020)
most_in_2020 <- arrange(most_in_2020, -cases)
most_in_2020_state <- most_in_2020$state[1]
# Ask your own 3 questions: in the section below, pose 3 questions,
# then use the appropriate code to answer them.
#What state had the most covid cases in 2020?
most_in_2020 <- filter(state, date == '2020-12-31')
# Ask your own 3 questions: in the section below, pose 3 questions,
# then use the appropriate code to answer them.
#What state had the most covid cases in 2020?
most_in_2020 <- filter(states, date == '2020-12-31')
most_in_2020 <- arrange(most_in_2020, -cases)
most_in_2020_state <- most_in_2020$state[1]
View(states)
# Ask your own 3 questions: in the section below, pose 3 questions,
# then use the appropriate code to answer them.
#What state had the most covid deaths in 2020?
most_in_2020 <- filter(states, date == '2020-12-31')
most_in_2020 <- arrange(most_in_2020, -deaths)
most_in_2020_state <- most_in_2020$state[1]
#What date had the highest combined deaths and cases--different_weights for deaths
#Deaths weighted equal
most_deaths_and_cases_df <- mutate(national, combined = new_cases + new_deaths)
View(most_deaths_and_cases_df)
most_deaths_and_cases <- arrange(most_deaths_and_cases_df, -combined)$date[1]
View(national)
View(national)
View(national)
View(national)
#Are there any inconsistencies in the new cases/deaths date(days with negative cases or deaths)?
new_deaths_df <- arrange(national, -new_cases)$cases[1]
# For this section, you should explore the dataset by answering the following
# questions. HINT: Remeber that in class, we talked about how you can answer
# most data analytics questions by selecting specific columns and rows.
# For this assignemnt, you are welcome to use either base R dataframe indexing or
# use functions from the DPLYR package (e.g., using `pull()`). Regardless, you
# must return the specific column being asked about. For example, if you are
# asked the *county* with the highest number of deaths, your answer should
# be a single value (the name of the county: *not* an entire row of data).
# (again, make sure to read the documentation to understand the meaning of
# each row -- it isn't immediately apparent!)
library(dplyr)
#Are there any inconsistencies in the new cases/deaths date(days with negative cases or deaths)?
new_deaths_df <- arrange(national, new_cases)$cases[1]
#Are there any inconsistencies in the new cases/deaths date(days with negative cases or deaths)?
new_deaths_df <- arrange(national, -new_cases)$cases[1]
#Are there any inconsistencies in the new cases/deaths date(days with negative cases or deaths)?
new_cases <- arrange(national, -new_cases)
View(new_cases)
#Are there any inconsistencies in the new cases/deaths date(days with negative cases or deaths)?
new_cases <- arrange(national, new_cases)
View(new_cases)
#Are there any inconsistencies in the new cases/deaths date(days with negative cases or deaths)?
lowest_new_cases <- arrange(national, new_cases)$new_cases[1]
lowest_new_deaths <- arrange(national, new_deaths)$new_deaths[1]
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
setwd("C:/Users/jleus/assignment-3---incarceration-jleuschen17")
knitr::opts_chunk$set(echo = TRUE)
source("plotsAndAnalysis.R")
library(knitr)
source("plotsAndAnalysis.R")
library(knitr)
source("plotsAndAnalddysis.R")
source("analysis.R")
knitr::opts_chunk$set(echo = TRUE)
source("analysis.R")
install.packages("knitr")
library(knitr)
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/analysis.R")
save(data, file='incarceration.Rda')
#data <- read.csv('https://raw.githubusercontent.com/vera-institute/incarceration-trends/master/incarceration_trends.csv')
#save(data, file='incarceration.Rda')
data <- readRDS(file='incarceration.Rda')
data <- read.csv('https://raw.githubusercontent.com/vera-institute/incarceration-trends/master/incarceration_trends.csv')
write.csv(data, 'incarceration.csv', row.names=FALSE, quote=FALSE)
data2 <- read.csv('incarceration.csv')
save(data, file='incarceration.rData')
data2 <- load('incarceration.rData')
data2 <- write.table('incarceration.rData')
save(data, file='incarceration.csv')
data2 <- read.csv('incarceration.csv')
View(data2)
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/analysis.R")
library(dplyr)
source("analysis.R")
library(knitr)
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/analysis.R")
library(dplyr)
source("analysis.R")
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/Summary.R")
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/Summary.R")
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/Summary.R")
library(dplyr)
source("Summary.R")
library(knitr)
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/Summary.R")
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/Summary.R")
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/Summary.R")
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/Summary.R")
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/analysis.R")
View(data)
source("C:/Users/jleus/assignment-3---incarceration-jleuschen17/analysis.R")
View(tx_plot)
tx_plot
plot_race_by_year('TX', plot_data) +
ca_plot <- plot_race_by_year('CA', plot_data)
plot_race_by_year('TX', plot_data)
data <- read.csv('https://raw.githubusercontent.com/vera-institute/incarceration-trends/master/incarceration_trends.csv')
#Introduction: The United States prison system is a far from perfect institution. With problems ranging from racial disparity to overcrowded jails, the system as a whole has been a topic of debate in recent years.
#One area of concern is the rates of incarceration across different races and ethnicities. The Vera Institute of Justice Prison Dataset is a useful tool in answering questions regarding incarceration rates across
#different racial and ethnic backgrounds. Specifically data relating to prison population and ethnic makeup are especially useful. For this project I will be analyzing the **INSERT NAMES HERE** features
#of the Vera Institute data set
library(dplyr)
library(tidyr)
library(knitr)
#Summary: After some initial analysis of the dataset I found a few metrics which help to paint a picture of the US prison system. First the breakdown of gender in prisons icnluded in the Vera Institute dataset indicated a significantly higher
#number of males are incarcerated compared to females--82.7 percent male, 13.1 percent female. Next, one area of prison systems which has been a major topic of discussion in recent years is incarceration rates across african american populations.
#The data indicates approximatley 34% of incarceration are african american. Aside from gender and race, one interesting metric relating to Incarceration is the number of jails which qualify as overcrowded--over 23,000. Finally,
#the data places the number of minors in prison at 2932 although this number is only counting prisons included in the dataset.
#PLOT
library(ggplot2)
library(reshape2)
plot_data <- filter(data, !is.na(black_jail_pop), !is.na(white_jail_pop), !is.na(aapi_jail_pop), !is.na(native_jail_pop), !is.na(latinx_jail_pop), !is.na(total_jail_pop))
plot_data <- filter(plot_data, year > 1985)
plot_data <- group_by(plot_data, year)
plot_race_by_year('TX', plot_data)
plot_race_by_year <- function(state_name, plot_data) {
plot_data_state <- filter(plot_data, state == state_name)
plot_data_line <- summarize(plot_data_state, black_pop = sum(black_jail_pop),
white_pop = sum(white_jail_pop),
aapi_pop = sum(aapi_jail_pop),
native_pop = sum(native_jail_pop),
latinx_pop = sum(latinx_jail_pop))
plot_data_line <- select(plot_data_line, year, black_pop, white_pop, aapi_pop, native_pop, latinx_pop)
plot_data_line <- melt(plot_data_line, id='year')
ggplot(plot_data_line, aes(x=year, y=value, colour=variable)) + geom_line()
}
plot_race_by_year('TX', plot_data)
plot_race_by_year('MS', plot_data)
plot_race_by_year('MS', plot_data)
plot_race_by_year('MS', plot_data)
plot_race_by_year('MS', plot_data)
plot_data_2 <- filter(data, !is.na(black_jail_pop), !is.na(white_jail_pop), !is.na(total_jail_pop))
plot_data_2 <- filter(plot_data_2, year == 2016)
plot_data_2 <- group_by(plot_data_2, state)
plot_data_2_prop <- summarize(plot_data_2, total = sum(total_jail_pop),
black_prop = sum(black_jail_pop) / sum(total_jail_pop),
white_prop = sum(white_jail_pop) / sum(total_jail_pop))
plot_data_2_pop <- summarize(plot_data_2, total = sum(total_jail_pop),
black_pop = sum(black_jail_pop),
white_pop = sum(white_jail_pop))
plot_data_2_standerdized <- mutate(plot_data_2, standerdized_white_jail_pop = white_jail_pop / 6)
plot_data_2_prop_standerdized <- summarize(plot_data_2_standerdized, total = sum(total_jail_pop),
black_prop_standerdized = sum(black_jail_pop) / sum(total_jail_pop),
white_prop_standerdized = sum(standerdized_white_jail_pop) / sum(total_jail_pop))
plot_data_2_pop_standerdized <- summarize(plot_data_2_standerdized, total = sum(total_jail_pop),
black_pop_standerdized = sum(black_jail_pop),
white_pop_standerdized = sum(standerdized_white_jail_pop))
plot_data_2_prop_graph <- pivot_longer(plot_data_2_prop, cols=c('black_prop', 'white_prop'),
names_to='variable', values_to='value')
plot_data_2_pop_graph <- pivot_longer(plot_data_2_pop, cols=c('black_pop', 'white_pop'),
names_to='variable', values_to='value')
plot_data_2_prop_standerdized_graph <- pivot_longer(plot_data_2_prop_standerdized, cols=c('black_prop_standerdized', 'white_prop_standerdized'),
names_to='variable', values_to='value')
plot_data_2_pop_standerdized_graph <- pivot_longer(plot_data_2_pop_standerdized, cols=c('black_pop_standerdized', 'white_pop_standerdized'),
names_to='variable', values_to='value')
prop_graph_states <- ggplot(plot_data_2_prop_graph, aes(x=state, y=value, fill=variable)) + geom_bar(stat='identity', position='dodge') + xlab('State') + ylab('Proportion')
pop_graph_states <- ggplot(plot_data_2_pop_graph, aes(x=state, y=value, fill=variable)) + geom_bar(stat='identity', position='dodge') + xlab('State') + ylab('Population')
prop_standerdized_graph_states <- ggplot(plot_data_2_prop_standerdized_graph, aes(x=state, y=value, fill=variable)) + geom_bar(stat='identity', position='dodge') + xlab('State') + ylab('Standerdized Proportion')
pop_standerdized_graph_states <- ggplot(plot_data_2_pop_standerdized_graph, aes(x=state, y=value, fill=variable)) + geom_bar(stat='identity', position='dodge') + xlab('State') + ylab('Standerdized Population')
####################################
library(usmap)
library(dplyr)
library(ggplot2)
library(patchwork)
usmap_data <- filter(data, !is.na(black_jail_pop), !is.na(total_jail_pop), year==2016)
usmap_data <- mutate(usmap_data, black_jail_prop = black_jail_pop / total_jail_pop)
usmap_data <- filter(usmap_data, black_jail_prop < 1.00)
usmap_plot <- plot_usmap(data = usmap_data, values='black_jail_prop') +
scale_fill_continuous(name = 'Black Jail Population', label=scales::comma) +
theme(legend.position = 'right')
usmap_plot
source("~/test1.R")
data <- read.csv('https://raw.githubusercontent.com/vera-institute/incarceration-trends/master/incarceration_trends.csv')
plot_data <- filter(data, !is.na(black_jail_pop), !is.na(white_jail_pop), !is.na(aapi_jail_pop), !is.na(native_jail_pop), !is.na(latinx_jail_pop), !is.na(total_jail_pop))
plot_data <- filter(plot_data, year > 1985)
plot_data <- group_by(plot_data, year)
plot_race_by_year <- function(state_name, plot_data) {
plot_data_state <- filter(plot_data, state == state_name)
plot_data_line <- summarize(plot_data_state, black_pop = sum(black_jail_pop),
white_pop = sum(white_jail_pop),
aapi_pop = sum(aapi_jail_pop),
native_pop = sum(native_jail_pop),
latinx_pop = sum(latinx_jail_pop))
plot_data_line <- select(plot_data_line, year, black_pop, white_pop, aapi_pop, native_pop, latinx_pop)
plot_data_line <- melt(plot_data_line, id='year')
ggplot(plot_data_line, aes(x=year, y=value, colour=variable)) + geom_line()
}
plot_race_by_year('TX', plot_data)
plot_race_by_year('KS', plot_data)
source("~/.active-rstudio-document")
# Basic line plot with points
ggplot(data=df, aes(x=dose, y=len, group=1)) +
geom_line()+
geom_point()
tx_plot <- plot_race_by_year('TX', plot_data)
print(tx_plot)
print(tx_plot)
(tx_plot)
tx_plot <- plot_race_by_year('TX', plot_data)
print(tx_plot)
